@model EZPZPOS.Models.OrderModels.OrderEdit

@{
    ViewBag.Title = "Edit Order";
    //IEnumerable<SelectListItem> menuItemList = ViewBag.MenuItemId;
}

<h2 style="text-align: center; font-weight: bolder; color: white;">Edit Order</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" style="font-weight: bolder; color: white;">
        @*<h4>OrderEdit</h4>*@
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.OrderId)

        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.FullName)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.FullName)
            </dd>
        </dl>

        @*<div class="form-group">
                @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.TypeOfOrder, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" style="color:black !important;">
                @Html.DropDownListFor(o => o.TypeOfOrder, Enum.GetValues(typeof(EZPZPOS.Data.OrderType)).Cast<EZPZPOS.Data.OrderType>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }))
                @Html.ValidationMessageFor(model => model.TypeOfOrder, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MenuItemId, "MenuItem", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.DropDownList("MenuItemId", (IEnumerable<SelectListItem>)ViewBag.MenuItems, htmlAttributes: new { @class = "form-control" })*@
                @Html.DropDownList("MenuItemId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MenuItemId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn button-color" />
            </div>
        </div>
    </div>
}

<div class="my-actionLink">
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
